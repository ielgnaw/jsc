/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,14,15,16,17,20,28,33],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[4,21,24,29],$V9=[17,19,33],$Va=[2,26],$Vb=[21,24],$Vc=[24,29];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"root_repetition0":5,"content":6,"nullLiteral":7,"booleanLiteral":8,"numberLiteral":9,"stringLiteral":10,"objectLiteral":11,"arrayLiteral":12,"NULL":13,"TRUE":14,"FALSE":15,"NUMBER":16,"STRING":17,"identLiteral":18,"IDENT":19,"BRACE_START":20,"BRACE_END":21,"objectMemberList":22,"objectMember":23,"COMMA":24,"objectMember_repetition0":25,"objectMember_group0":26,"COLON":27,"SBRACKET_START":28,"SBRACKET_END":29,"arrayMemberList":30,"arrayMemberList_repetition0":31,"arrayMemberList_repetition1":32,"SC":33,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",13:"NULL",14:"TRUE",15:"FALSE",16:"NUMBER",17:"STRING",19:"IDENT",20:"BRACE_START",21:"BRACE_END",24:"COMMA",27:"COLON",28:"SBRACKET_START",29:"SBRACKET_END",33:"SC"},
productions_: [0,[3,1],[3,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[8,1],[8,1],[9,1],[10,1],[18,1],[11,2],[11,3],[22,1],[22,3],[23,4],[12,2],[12,3],[30,2],[30,4],[5,0],[5,2],[25,0],[25,2],[26,1],[26,1],[31,0],[31,2],[32,0],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = '';
    
break;
case 2:

        if ($$[$0-2]) {
            var startComment = yy.parseComment($$[$0-2]);
            for (var i in startComment) {
                if (i === 'url') {
                    schema.id = startComment[i];
                }
                else {
                    schema[i] = startComment[i];
                }
            }
        }

        schema.type = $$[$0-1].type;

        var properties = $$[$0-1].properties;
        if (properties) {
            schema.properties = {};
            yy.analyzeParent4Obj(properties, schema.properties);
        }

        var items = $$[$0-1].items;
        if (items) {
            schema.items = [];
            yy.analyzeParent4Arr(items);
        }

        console.warn(yy.stringify($$[$0-1], schema.id), '33');

        console.warn(yy.stringify(schema, schema.id));
        return yy.extend(schema, JSON.parse(yy.stringify($$[$0-1], schema.id)));
    
break;
case 9:

        this.$ = {
            type: 'null',
            value: null
        };
    
break;
case 10:

        this.$ = {
            type: 'boolean',
            value: true
        };
    
break;
case 11:

        this.$ = {
            type: 'boolean',
            value: false
        };
    
break;
case 12:

        this.$ = {
            type: 'integer',
            value: Number(yytext)
        }
    
break;
case 13:

        yytext = yytext.replace(/\\(\\|")/g, '$' + '1')
            .replace(/\\n/g,'\n')
            .replace(/\\r/g,'\r')
            .replace(/\\t/g,'\t')
            .replace(/\\v/g,'\v')
            .replace(/\\f/g,'\f')
            .replace(/\\b/g,'\b');
        this.$ = {
            type: 'string',
            value: yytext
        };
    
break;
case 14:

        this.$ = {
            type: 'string',
            value: yytext
        };
    
break;
case 15:

        this.$ = {};
    
break;
case 16: case 21:

        this.$ = $$[$0-1];
    
break;
case 17:

        this.$ = {
            type: 'object',
            properties: {}
        };
        $$[$0][1].id = '$schemaId-' + $$[$0][0];
        this.$.properties[$$[$0][0]] = $$[$0][1];
        yy.extend(this.$.properties[$$[$0][0]], $$[$0][2]);
    
break;
case 18:

        this.$ = $$[$0-2];
        $$[$0][1].id = '$schemaId-' + $$[$0][0];
        $$[$0-2].properties[$$[$0][0]] = $$[$0][1];
        yy.extend($$[$0-2].properties[$$[$0][0]], $$[$0][2]);
    
break;
case 19:

        if ($$[$0].type === 'object') {
            for (var i in $$[$0].properties) {
                $$[$0].properties[i].parent = $$[$0-2].value;
            }
        }
        var objectComment = {};
        if ($$[$0-3]) {
            objectComment = yy.parseComment($$[$0-3]);
        }
        this.$ = [$$[$0-2].value, $$[$0], objectComment];
    
break;
case 20:

        this.$ = {
            type: 'array',
            id: '$schemaId-',
            items: []
        };
    
break;
case 22:

        this.$ = {
            type: 'array',
            items: []
        };
        $$[$0].id = '$schemaId-' + this.$.items.length;
        var arrayComment = {};
        if ($$[$0-1]) {
            arrayComment = yy.parseComment($$[$0-1]);
        }
        yy.extend($$[$0], arrayComment);
        this.$.items.push($$[$0]);
    
break;
case 23:

        $$[$0].id = '$schemaId-' + $$[$0-3].items.length;
        var arrayComment = {};
        if ($$[$0-1]) {
            arrayComment = yy.parseComment($$[$0-1]);
        }
        yy.extend($$[$0], arrayComment);
        $$[$0-3].items.push($$[$0]);
        this.$ = $$[$0-3];
    
break;
case 24: case 26: case 30: case 32:
this.$ = [];
break;
case 25: case 27: case 31: case 33:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,24],{3:1,5:3,4:[1,2]}),{1:[3]},{1:[2,1]},{6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:$V1,14:$V2,15:$V3,16:$V4,17:$V5,20:$V6,28:$V7,33:[1,5]},{4:[1,19]},o($V0,[2,25]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o([4,21,24,27,29],[2,13]),o($V9,$Va,{22:21,23:22,25:23,21:[1,20]}),o($V0,[2,30],{30:25,31:26,29:[1,24]}),{1:[2,2]},o($V8,[2,15]),{21:[1,27],24:[1,28]},o($Vb,[2,17]),{10:31,17:$V5,18:32,19:[1,33],26:29,33:[1,30]},o($V8,[2,20]),{24:[1,35],29:[1,34]},{6:36,7:6,8:7,9:8,10:9,11:10,12:11,13:$V1,14:$V2,15:$V3,16:$V4,17:$V5,20:$V6,28:$V7,33:[1,37]},o($V8,[2,16]),o($V9,$Va,{25:23,23:38}),{27:[1,39]},o($V9,[2,27]),{27:[2,28]},{27:[2,29]},{27:[2,14]},o($V8,[2,21]),o($V0,[2,32],{32:40}),o($Vc,[2,22]),o($V0,[2,31]),o($Vb,[2,18]),{6:41,7:6,8:7,9:8,10:9,11:10,12:11,13:$V1,14:$V2,15:$V3,16:$V4,17:$V5,20:$V6,28:$V7},{6:42,7:6,8:7,9:8,10:9,11:10,12:11,13:$V1,14:$V2,15:$V3,16:$V4,17:$V5,20:$V6,28:$V7,33:[1,43]},o($Vb,[2,19]),o($Vc,[2,23]),o($V0,[2,33])],
defaultActions: {2:[2,1],19:[2,2],31:[2,28],32:[2,29],33:[2,14]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var schema = {
        '$schema': 'http://json-schema.org/draft-04/schema#',
        'id': 'http://jsonschema.net'
    };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var debug = require('debug')('jsc: lexer');
    var s, s2, s3;
    var rv, rv2, e_offset, col, row, len, value;
    var match, match2;
    // debug(YY_START);

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    // ignore whitespace

break;
case 1:
     // ignore \n

break;
case 2:
    yy_.yytext = yy_.yytext.replace(/\/\/\s*/, '');
    if (this.topState() !== 'sc') {
        this.begin('sc');
    }
    return 33;

break;
case 3:
    this.popState();

break;
case 4:
    return 14;

break;
case 5:
    return 15;

break;
case 6:
    return 13;

break;
case 7:
    return 16;

break;
case 8:
    yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
    return 17;

break;
case 9:
    return 19;

break;
case 10:
    return 27;

break;
case 11:
    return 24;

break;
case 12:
    return 28;

break;
case 13:
    return 29;

break;
case 14:
    return 20;

break;
case 15:
    return 21;

break;
case 16:
    this.popState();
    return 4;

break;
case 17:
    return 4;

break;
case 18:
    this.begin('s');

break;
}
},
rules: [/^(?:([ \s\t]+))/,/^(?:(\n+))/,/^(?:(\/\/[^\n]*))/,/^(?:(\n+))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:((-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b))/,/^(?:(("([^\n\r\f\\"])*")|('([^\n\r\f\\'])*')))/,/^(?:([a-zA-Z_0-9]+))/,/^(?:(:))/,/^(?:(,))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:$)/,/^(?:$)/,/^(?:)/],
conditions: {"s":{"rules":[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16],"inclusive":false},"sc":{"rules":[3],"inclusive":false},"INITIAL":{"rules":[17,18],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}